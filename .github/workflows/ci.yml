name: CI

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: write
  issues: write
  pull-requests: write

jobs:
  build:
    name: 'Build and Push Docker Image'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Generate tag
        id: generate_tag
        run: |
          SHA=$(echo $GITHUB_SHA | head -c7)
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        id: build-docker-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          TAG: ${{ steps.generate_tag.outputs.sha }}
        run: |
          docker build -t $REGISTRY/dags-ci-project:$TAG .
          docker push $REGISTRY/dags-ci-project:$TAG
          IMAGE="$REGISTRY/dags-ci-project:$TAG"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}


      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.4

      - name: Deploy to AWS AppRunner (Dev)
        run: |
          cd terraform/dev
          terraform init
          terraform plan
          terraform apply -auto-approve
          echo "SERVICE_URL=$(terraform output -raw service_url)" >> $GITHUB_ENV
        env:
          TF_VAR_service_name: "my-app-dev"
          TF_VAR_image_identifier: "${{ steps.build-docker-image.outputs.image }}"
          TF_VAR_access_role_arn: ${{ secrets.APPRUNNER_ROLE }}
          TF_VAR_port: 3001
          TF_VAR_environment: "dev"
          TF_VAR_environment_variables: '{"NODE_ENV": "development"}'
          TF_VAR_CPU: "1 vCPU"
          TF_VAR_RAM: "2 GB"

      - name: Verify Application Health (Dev)
        run: |
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $SERVICE_URL/health)
            if [ "$RESPONSE" -ne 200 ]; then
              echo "Application health check failed with status code $RESPONSE"
              exit 1
            else
              echo "Application is healthy"
            fi

      - name: Delete Aplication Dev
        run: |
            cd terraform/dev
            terraform destroy -auto-approve
      - name: Deploy to AWS AppRunner (Prod)
        run: |
            cd terraform/prod
            terraform init
            terraform plan
            terraform apply -auto-approve
        env:
          TF_VAR_service_name: "my-app-prod"
          TF_VAR_image_identifier: "${{ steps.build-docker-image.outputs.image }}"
          TF_VAR_access_role_arn: ${{ secrets.APPRUNNER_ROLE }}
          TF_VAR_port: 3001
          TF_VAR_environment: "prod"
          TF_VAR_environment_variables: '{"NODE_ENV": "production"}'
          TF_VAR_CPU: "2 vCPU"
          TF_VAR_RAM: "4 GB"